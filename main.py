"""
Grade Calculator (Interactive CLI)

Features:
- Define grade components (e.g., Homework, Quizzes, Midterm, Final) with weights.
- For each component you can:
    * Enter a direct percentage (simple mode), or
    * Enter multiple scored items (earned points / possible points) and compute the component percentage (detailed mode).
- Calculates weighted final percentage and maps it to a letter grade.
- "What-if" calculation: given remaining weight, compute required average on remaining items to reach a target final grade.
- Input validation and helpful prompts.

Usage: run with Python 3.7+
    python grade_calculator.py

Author: Generated by GitHub Copilot-style assistant
"""
from typing import List, Dict, Tuple, Optional


def input_int(prompt: str, min_value: Optional[int] = None, max_value: Optional[int] = None) -> int:
    while True:
        try:
            v = int(input(prompt).strip())
            if min_value is not None and v < min_value:
                print(f"Enter a number >= {min_value}.")
                continue
            if max_value is not None and v > max_value:
                print(f"Enter a number <= {max_value}.")
                continue
            return v
        except ValueError:
            print("Please enter a whole number.")


def input_float(prompt: str, min_value: Optional[float] = None, max_value: Optional[float] = None) -> float:
    while True:
        try:
            v = float(input(prompt).strip())
            if min_value is not None and v < min_value:
                print(f"Enter a number >= {min_value}.")
                continue
            if max_value is not None and v > max_value:
                print(f"Enter a number <= {max_value}.")
                continue
            return v
        except ValueError:
            print("Please enter a valid number.")


def get_component_detailed(name: str) -> Tuple[float, float]:
    """
    Ask user to enter multiple scored items for this component.
    Returns (earned_points_total, possible_points_total)
    """
    n = input_int(f"How many items are there in '{name}'? Enter 0 if none: ", min_value=0)
    earned_total = 0.0
    possible_total = 0.0
    for i in range(1, n + 1):
        earned = input_float(f"  Item {i} earned points: ", min_value=0.0)
        possible = input_float(f"  Item {i} possible points: ", min_value=0.0)
        if possible == 0:
            print("  Possible points cannot be zero; item ignored.")
            continue
        earned_total += earned
        possible_total += possible
    return earned_total, possible_total


def compute_component_percentage_from_items(earned: float, possible: float) -> float:
    if possible <= 0:
        return 0.0
    return (earned / possible) * 100.0


def default_letter_grade(percent: float) -> str:
    # Common US scale; you can change thresholds as needed
    if percent >= 93.0:
        return "A"
    if percent >= 90.0:
        return "A-"
    if percent >= 87.0:
        return "B+"
    if percent >= 83.0:
        return "B"
    if percent >= 80.0:
        return "B-"
    if percent >= 77.0:
        return "C+"
    if percent >= 73.0:
        return "C"
    if percent >= 70.0:
        return "C-"
    if percent >= 60.0:
        return "D"
    return "F"


def gather_components() -> List[Dict]:
    components: List[Dict] = []
    num = input_int("How many grade components do you have (e.g., Homework, Midterm, Final)? ", min_value=1)
    for i in range(1, num + 1):
        name = input(f"Name of component #{i}: ").strip() or f"Component{i}"
        weight = input_float(f"Weight of '{name}' (as percentage of final grade, e.g., 20 for 20%): ", min_value=0.0, max_value=100.0)
        mode = ""
        while mode not in ("s", "d"):
            mode = input("  Enter scores in (s)imple percent mode or (d)etailed item mode? [s/d]: ").strip().lower() or "s"
        component = {"name": name, "weight": weight}
        if mode == "s":
            percent = input_float(f"  Enter your percentage for '{name}' (0-100). If not available, enter -1: ", min_value=-1.0, max_value=100.0)
            if percent < 0:
                # mark as missing/unentered
                component["entered"] = False
                component["percent"] = 0.0
                component["earned"] = 0.0
                component["possible"] = 0.0
            else:
                component["entered"] = True
                component["percent"] = percent
                # for compatibility with detailed fields:
                component["earned"] = percent
                component["possible"] = 100.0
        else:
            earned, possible = get_component_detailed(name)
            if possible <= 0:
                component["entered"] = False
                component["percent"] = 0.0
                component["earned"] = 0.0
                component["possible"] = 0.0
            else:
                pct = compute_component_percentage_from_items(earned, possible)
                component["entered"] = True
                component["percent"] = pct
                component["earned"] = earned
                component["possible"] = possible
        components.append(component)
    return components


def compute_weighted_grade(components: List[Dict]) -> Tuple[float, float, float]:
    """
    Returns (current_weighted_percent, completed_weight_sum, missing_weight_sum)
    - current_weighted_percent: sum of (component_percent * weight) / 100
    - completed_weight_sum: total weight of components with entered grades
    - missing_weight_sum: total weight of components without entered grades
    """
    total = 0.0
    completed_weight = 0.0
    missing_weight = 0.0
    for c in components:
        w = c["weight"]
        if c.get("entered", False):
            total += (c["percent"] * w) / 100.0
            completed_weight += w
        else:
            missing_weight += w
    return total, completed_weight, missing_weight


def print_report(components: List[Dict], letter_scale_func=default_letter_grade) -> None:
    current_percent, completed_w, missing_w = compute_weighted_grade(components)
    print("\n--- Grade Report ---")
    for c in components:
        entered = "Yes" if c.get("entered", False) else "No"
        pct = c.get("percent", 0.0)
        print(f"{c['name']:20s} | Weight: {c['weight']:5.1f}% | Entered: {entered:3s} | Component %: {pct:6.2f}")
    print("--------------------")
    print(f"Weighted percent from entered components: {current_percent:6.2f}%")
    print(f"Total weight of entered components: {completed_w:5.1f}%")
    print(f"Total weight remaining (not entered): {missing_w:5.1f}%")
    projected_final = current_percent  # assumes missing components contribute 0 (worst) unless user provides "what-if"
    print(f"Current projected final (missing counted as 0): {projected_final:6.2f}% -> {letter_scale_func(projected_final)}")
    if missing_w > 0:
        print("You can run a 'what-if' to see required average on remaining components to reach a target grade.")


def what_if_calculation(components: List[Dict], target_percent: float) -> None:
    current_percent, completed_w, missing_w = compute_weighted_grade(components)
    if missing_w <= 0.0:
        print("No remaining weight — all components entered. Nothing left to compute.")
        return
    # Let x be average percent across remaining components (0-100). Then:
    # final = current_percent + (x * missing_w) / 100
    # Solve for x: x = (target_percent - current_percent) * 100 / missing_w
    needed_x = (target_percent - current_percent) * 100.0 / missing_w
    if needed_x > 100.0:
        print(f"To reach {target_percent:.2f}%, you would need an average of {needed_x:.2f}% on the remaining {missing_w:.1f}% — that's more than 100%, so it's not achievable.")
    elif needed_x <= 0.0:
        print(f"You already have enough points to reach {target_percent:.2f}% even if you score 0 on the remaining items.")
    else:
        print(f"To reach {target_percent:.2f}% overall, you need an average of {needed_x:.2f}% on the remaining {missing_w:.1f}% of the course weight.")


def interactive_main():
    print("Welcome to the Grade Calculator.")
    components = gather_components()

    while True:
        print("\nOptions:")
        print("  1) Show current report")
        print("  2) What-if: required score on remaining to reach target")
        print("  3) Re-enter components")
        print("  4) Exit")
        choice = input("Choose an option [1-4]: ").strip()
        if choice == "1":
            print_report(components)
        elif choice == "2":
            target = input_float("Enter the target final percentage you want (0-100): ", min_value=0.0, max_value=100.0)
            what_if_calculation(components, target)
        elif choice == "3":
            print("Re-entering components...")
            components = gather_components()
        elif choice == "4":
            print("Goodbye — exiting.")
            break
        else:
            print("Invalid choice. Please choose 1-4.")


if __name__ == "__main__":
    interactive_main()
